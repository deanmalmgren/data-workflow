# this example is used to validate that the task graph is always
# traversed in a deterministic order. Task graphs are always iterated
# over based on their dependencies, but ties are broken based on the
# ordering in this file, the final order should be
#ORDER data/a
#ORDER data/z
#ORDER data/e
#ORDER data/g
#ORDER data/b
#ORDER data/c
#ORDER data/d
#ORDER data/j
#ORDER data/k
#ORDER data/l
#ORDER data/f
#ORDER data/y

---
creates: data/a
command:
  - mkdir -p $(dirname {{creates}})
  - echo "x" > {{creates}}

---
creates: data/z
command: echo "x" > {{creates}}

---
creates: data/b
depends: data/a
command: echo "x" > {{creates}}

---
creates: data/c
depends: data/a
command: echo "x" > {{creates}}

---
creates: data/d
depends: data/a
command: echo "x" > {{creates}}

---
creates: data/j
depends: data/a
command: echo "x" > {{creates}}

---
creates: data/k
depends: data/a
command: echo "x" > {{creates}}

---
creates: data/l
depends: data/a
command: echo "x" > {{creates}}

---
creates: data/e
command: echo "x" > {{creates}}

---
creates: data/f
depends: data/e
command: echo "x" > {{creates}}

---
creates: data/g
command: echo "x" > {{creates}}

---
creates: data/h
depends: data/g
command: echo "x" > {{creates}}

---
creates: data/y
depends: data/z
command: echo "x" > {{creates}}

