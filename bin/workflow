#!/usr/bin/env python
# -*- mode: python -*-

"""Execute data workflows defined in workflow.yaml files
"""

import argparse
import sys
import os
import ConfigParser
import types

import argcomplete

from workflow.parser import get_available_tasks, get_available_archives
from workflow.commands import execute, clean, archive
from workflow.exceptions import CommandLineException, ConfigurationNotFound
from workflow.notify import notify

# setup the option parser
parser = argparse.ArgumentParser(
    description=__doc__,
)

# make it possible for users to specify task_ids on the command line. 
#
# NOTE: for some reason, nargs='*' is not working when you don't
# specify any tasks. Not sure if this is a pythong 2.7 problem or
# what, but nothing seemed to work with this.
try:
    available_tasks = get_available_tasks()
except ConfigurationNotFound:
    available_tasks = []
parser.add_argument(
    'task_id',
    metavar='TASK',
    type=str,
    choices=available_tasks,
    nargs='?', # '*', this isn't working for some reason
    help='Specify a particular task to run.',
)

# add a bunch of keyword arguments
parser.add_argument(
    '-f', '--force',
    action="store_true",
    help=(
        "Rerun entire workflow, regardless of task state. With --clean, "
        "remove all `creates` targets in workflow without confirmation."
    ),
)
parser.add_argument(
    '-d', '--dry-run',
    action="store_true",
    help=(
        "Do not run workflow, just report which tasks would be run and how "
        "long it would take."
    ),
)
parser.add_argument(
    '-e', '--export',
    action="store_true",
    help="Export shell script instead of running the workflow.",
)
parser.add_argument(
    '-c', '--clean',
    action="store_true",
    help="Confirm before removing all `creates` targets defined in workflow.",
)
parser.add_argument(
    '--notify',
    type=str,
    metavar='EMAIL',
    nargs=1,
    help='Specify an email address to notify on completion',
)

# Here are a few handy commands for backing up a workflow and
# restoring it. This will hopefully make debugging a lot easier! Can
# only specify one of these options
try:
    available_archives = get_available_archives()
except ConfigurationNotFound:
    available_archives = []
group = parser.add_mutually_exclusive_group()
group.add_argument(
    '--backup',
    action="store_true",
    help="Backup the current state of the workflow."
)
group.add_argument(
    '--restore',
    choices=available_archives,
    default=False,
    nargs='?',
    help="Restore the state of the workflow."
)

# use argcomplete to autocomplete options, the parse arguments and run
argcomplete.autocomplete(parser)
args = parser.parse_args()

try:
    if args.clean:
        clean(task_id=args.task_id, force=args.force, export=args.export)
    elif args.backup or isinstance(args.restore, (str, types.NoneType)):
        if args.restore is None:
            args.restore = available_archives[-1]
        archive(backup=args.backup, restore=args.restore)
    else:
        execute(task_id=args.task_id, force=args.force, dry_run=args.dry_run,
                export=args.export)
except CommandLineException, e:
    print(e)
    sys.exit(1)

if args.notify:
    notify(*args.notify)
